## Demystifying microservices

Except (and actually, I'm not sure) if you spent the last year in a cave, you probably heard about _microservices_.
What what are _microservices_ ? Let's use the following definition:

[quote, Martin Fowler, http://martinfowler.com/articles/microservices.html]
The microservice architectural style is an approach to developing a single application as a suite of small services,
each running in its own process and communicating with lightweight mechanisms, often an HTTP resource API. These
services are built around business capabilities and independently deployable by fully automated deployment machinery.
There is a bare minimum of centralized management of these services, which may be written in different programming
languages and use different data storage technologies.

So _microservice_ is an _architectural style_, so a _specialization of element and relation types, together with
constraints and how they can be used_. And now, you say "what ???".

Let's rewind, and take another approach... Why did we come up with _microservices_. You have an application, rather
large, and as large application, the maintenance is a nightmare, adding features take too much time, the technology
used is very outdated, any change need to pass a 50-steps process and be validated by 5 levels of management,
obviously there are several teams on the application with different requirements and pace. Well, we have such a
monster app. How could we make the development and maintenance of this application efficient ? Microservices answer
this question. It aims to reduce the _time to production_.

To do that, the _microservice_ architectural style proposes to:

1. split the application into a set of decoupled components providing defined `services`
2. the components communicates with whatever protocol, often REST, but not necessary
3. the components uses whatever language and technologies they want
4. each component can be developed, released and deployed independently
5. the deployments intend to be _automated_
6. the orchestration of the whole application needs to be reduced to the bare minimum

Something to understand is that _microservices_ are not new... Academic papers form the 70's and 80's has defined
(using different terms) architectural styles very close to this.

In this lab, we don't address the point 5, but you should know that Vert.x does not restricts how you want to deploy your components (ssh, ansible, puppet, docker, cloud, bare metal...).

The last point is interesting, and often misunderstood. It's pretty cool to develop independent pieces of software
that magically interact at runtime.... But actually, there is no magic (sorry). There is some _discovery_ happening.

Before using a `service` provided by another component, it should find it. The location can be hard coded
in the code (but it's generally not a good idea), use DNS, or use more advanced frameworks. Having a discovery
mechanism also provide a consolidated view of what's there. Being able to discover the different services, or resources available let you implement some _transparency_, that is an inherent characteristic of distributed systems. Typically, when you enter an URL in your browser, you don't know which computer is handling the request, and it may change if you refresh the page. It also lets your component being adaptable to meet the new _location_ of the different services.

Even if not necessary, per definition, microservice applications are generally distributed. This comes with all the
distributed application benefits and constraints: consensus, CAP theorem, consistency, monitoring, and many many reason
 to fail. So microservices applications need to be design to face failure from their early staged.

Even if in the previous pseudo-definition of microservices, it's about splitting an existing application into a set
of independent components, there are also greefield application that can choose the microservice approach, following
the same principles.

If you are a developer since a couple of year, you may wonder the difference between microservices and SOA. It's not
a question of size, and actually the word "microservice" is not really appropriate, as size does not matter.
Microservices and SOA had different purpose. SOA was about integrating system handles by different stakeholders,
while microservices is about reducing the time to production. That said, behind the hood, the concepts are close:

* service : a defined feature accessible by an API, a client, a proxy...
* service provider: a component implementing a service
* service consumer: a component consuming a service
* service discovery: the mechanism used by a consumer to find a provider

Are microservices limited to REST ? No, and actually it's a common misconception. Microservices can use whatever
interaction style fitting their service: RPC, events, messages, streams....

